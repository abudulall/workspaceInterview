Q1: What Is Load Balancing? ☆
Answer:
Load balancing is simple technique for distributing workloads across multiple machines or clusters. The most
common and simple load balancing algorithm is Round Robin. In this type of load balancing the request is divided
in circular order ensuring all machines get equal number of requests and no single machine is overloaded or
underloaded.
The Purpose of load balancing is to
Optimize resource usage (avoid overload and under-load of any machines)
Achieve Maximum Throughput
Minimize response time
Most common load balancing techniques in web based applications are
1. Round robin
2. Session affinity or sticky session
3. IP Address affinit

Q2: What Is CAP Theorem? ☆
Answer:
The CAP Theorem for distributed computing was published by Eric Brewer. This states that it is not possible
for a distributed computer system to simultaneously provide all three of the following guarantees:
1. Consistency (all nodes see the same data even at the same time with concurrent updates )
2. Availability (a guarantee that every request receives a response about whether it was successful or failed)
3. Partition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the
system)
The CAP acronym corresponds to these three guarantees. This theorem has created the base for modern
distributed computing approaches. Worlds most high volume traffic companies (e.g. Amazon, Google, Facebook)
use this as basis for deciding their application architecture. It's important to understand that only two of these
three conditions can be guaranteed to be met by a system.

Q3: What Is Scalability? ☆☆
Answer:
Scalability is the ability of a system, network, or process to handle a growing amount of load by adding more
resources. The adding of resource can be done in two ways
Scaling Up
This involves adding more resources to the existing nodes. For example, adding more RAM, Storage or
processing power.
Scaling Out
This involves adding more nodes to support more users.
Any of the approaches can be used for scaling up/out a application, however the cost of adding resources (per
user) may change as the volume increases. If we add resources to the system It should increase the ability of
application to take more load in a proportional manner of added resources.
An ideal application should be able to serve high level of load in less resources. However, in practical, linearly
scalable system may be the best option achievable. Poorly designed applications may have really high cost on
scaling up/out since it will require more resources/user as the load increases.

Q4: Why Do You Need Clustering? ☆☆
Answer:
Clustering is needed for achieving high availability for a server software. The main purpose of clustering is to
achieve 100% availability or a zero down time in service. A typical server software can be running on one
computer machine and it can serve as long as there is no hardware failure or some other failure. By creating a
cluster of more than one machine, we can reduce the chances of our service going un-available in case one of
the machine fails.
Doing clustering does not always guarantee that service will be 100% available since there can still be a chance
that all the machine in a cluster fail at the same time. However it in not very likely in case you have many
machines and they are located at different location or supported by their own resources.

Q5: What is Test Driven Development? ☆☆
Answer:
Test Driven Development (TDD) is also known as test-driven design. In this method, developer:
1. first writes an automated test case which describes new function or improvement and
2. then creates small codes to pass that test, and
3. later re-factors the new code to meet the acceptable standards.

Q6: What is meant by the KISS principle? ☆☆
Answer:
KISS, a backronym for "keep it simple, stupid", is a design principle noted by the U.S. Navy in 1960. The KISS
principle states that most systems work best if they are kept simple rather than made complicated; therefore
simplicity should be a key goal in design, and that unnecessary complexity should be avoided.

Q7: What defines a software architect? ☆☆
Answer:
An architect is the captain of the ship, making the decisions that cross multiple areas of concern (navigation,
engineering, and so on), taking final responsibility for the overall health of the ship and its crew (project and its
members), able to step into any station to perform those duties as the need arises (write code for any part of the
project should they lose a member). He has to be familiar with the problem domain, the technology involved, and
keep an eye out on new technologies that might make the project easier or answer new customers' feature
requests.

Q8: Define Microservice Architecture ☆☆
Answer:
Microservices, aka Microservice Architecture, is an architectural style that structures an application as a
collection of small autonomous services, modeled around a business domain.

Q9: What is Domain Driven Design? ☆☆
Answer:
Domain Driven Design is a methodology and process prescription for the development of complex systems
whose focus is mapping activities, tasks, events, and data within a problem domain into the technology artifacts
of a solution domain.
It is all about trying to make your software a model of a real-world system or process.

Q10: What do you understand by Clean Architecture approach? ☆☆
Answer:
The majority of architectural approaches (like Onion or Hexagonal Architecture) have this common set of
characteristics:
The architectural approach shall be:
Independent of any tech frameworks
Testable: business rules are testable without the UI, the DB, the web server, and any other external
element.
Independent of the UI: The UI can change easily with no impact on the business rules. The UI can easily
be replaced.
Independent of the database
Independent of external agents: The business rules don't know anything about interfaces to the outside
world.
The Clean Architecture is an attempt at integrating all these architectures into a single actionable idea

Q11: What is Back-Pressure? ☆☆☆
Answer:
When one component is struggling to keep-up, the system as a whole needs to respond in a sensible way. It is
unacceptable for the component under stress to fail catastrophically or to drop messages in an uncontrolled
fashion. Since it can’t cope and it can’t fail it should communicate the fact that it is under stress to upstream
components and so get them to reduce the load.
This back-pressure is an important feedback mechanism that allows systems to gracefully respond
to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which
point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load, and
will provide information that may allow the system itself to apply other resources to help distribute the load.

Q12: What is Elasticity (in contrast to Scalability)? ☆☆☆
Answer:
Elasticity means that the throughput of a system scales up or down automatically to meet varying demand as
resource is proportionally added or removed. The system needs to be scalable to allow it to benefit from the
dynamic addition, or removal, of resources at runtime. Elasticity therefore builds upon scalability and expands on
it by adding the notion of automatic resource management
